generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String?                  @unique
  emailVerified          DateTime?
  image                  String?
  plan                   String                   @default("free")
  subscriptionEndDate    DateTime?                // 구독 종료 예정일
  subscriptionCanceled   Boolean                  @default(false) // 구독 취소 여부
  isAdmin                Boolean                  @default(false)
  accounts               Account[]
  sessions               Session[]
  audio_plays            audio_plays[]
  notification_interests notification_interests?
  reservedMessages       ReservedMessage[]
  interestedCategories   UserInterestedCategory[]
  inquiries              Inquiry[]
  payments               Payment[]
  paymentHistories       PaymentHistory[]
  subscriptions          Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserApplication {
  id               Int      @id @default(autoincrement())
  name             String
  phoneNumber      String   @unique
  interestedTopics String[]
  privacyConsent   Boolean  @default(false)
  marketingConsent Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("user_applications")
}

model UserActivity {
  id         Int      @id @default(autoincrement())
  sessionId  String
  action     String
  trackId    Int?
  trackTitle String?
  category   String?
  duration   Int?
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())

  @@map("user_activities")
}

model Audio {
  id          Int             @id @default(autoincrement())
  title       String
  publishDate DateTime
  filePath    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  categoryId  Int
  script      String?
  description String?
  imageUrl    String?
  duration    Int?
  audio_plays audio_plays[]
  category    Category        @relation(fields: [categoryId], references: [id])
  generated   GeneratedAudio?

  @@map("audios")
}

model Category {
  id                    Int                      @id @default(autoincrement())
  name                  String                   @unique
  isFree                Boolean                  @default(false)
  presenterImage        String?
  presenterName         String?
  presenterPersona      String?
  presenterVoiceId      String?
  audios                Audio[]
  interestedUsers       UserInterestedCategory[]
  schedulers            AudioScheduler[]

  @@map("categories")
}

model UserInterestedCategory {
  id         Int      @id @default(autoincrement())
  userId     String
  categoryId Int
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_interested_categories")
}

model ReservedMessage {
  id           Int      @id @default(autoincrement())
  userId       String
  message      String
  reservedTime DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reserved_messages")
}

model audio_plays {
  id       Int      @id @default(autoincrement())
  userId   String
  audioId  Int
  playedAt DateTime @default(now())
  duration Int?
  audios   Audio    @relation(fields: [audioId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model notification_interests {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Inquiry {
  id          Int      @id @default(autoincrement())
  userId      String?
  type        String
  subject     String?
  content     String
  email       String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("inquiries")
}

model AudioScheduler {
  id                    Int      @id @default(autoincrement())
  name                  String
  categoryId            Int
  prompt                String
  elevenLabsVoiceId     String
  cronExpression        String
  isActive              Boolean  @default(true)
  lastRunAt             DateTime?
  nextRunAt             DateTime?
  totalGenerated        Int      @default(0)
  promptMode            String   @default("single") // single, perplexity, list
  topicList             Json?    // Array of topics for list mode
  currentTopicIndex     Int      @default(0)
  usePerplexity         Boolean  @default(false)
  perplexitySystemPrompt String?  // System prompt for Perplexity searches
  publishDateOffset     Int      @default(0) // Days to offset publish date from execution date (0 = same day)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  category              Category @relation(fields: [categoryId], references: [id])
  generatedAudios       GeneratedAudio[]

  @@map("audio_schedulers")
}

model GeneratedAudio {
  id          Int            @id @default(autoincrement())
  schedulerId Int
  audioId     Int            @unique
  createdAt   DateTime       @default(now())
  scheduler   AudioScheduler @relation(fields: [schedulerId], references: [id], onDelete: Cascade)
  audio       Audio          @relation(fields: [audioId], references: [id], onDelete: Cascade)

  @@map("generated_audios")
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  tid              String        @unique
  cid              String
  partnerOrderId   String
  partnerUserId    String
  itemName         String
  quantity         Int
  totalAmount      Int
  taxFreeAmount    Int           @default(0)
  vatAmount        Int           @default(0)
  status           String        @default("ready") // ready, approved, failed, cancelled
  paymentMethodType String?
  paymentType      String        @default("onetime") // onetime, subscription
  subscriptionId   String?       // 정기결제인 경우 구독 ID 연결
  approvedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  paymentHistory   PaymentHistory[]

  @@map("payments")
}

model PaymentHistory {
  id               String   @id @default(cuid())
  paymentId        String
  userId           String
  action           String   // ready, approve, cancel, fail
  amount           Int?
  paymentMethodType String?
  cardInfo         Json?
  errorCode        String?
  errorMessage     String?
  createdAt        DateTime @default(now())
  payment          Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_histories")
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String
  sid               String    @unique // 카카오페이 구독 ID
  cid               String    // 가맹점 코드
  status            String    @default("active") // active, inactive, suspended
  billingCycle      String    @default("monthly") // monthly, yearly
  amount            Int       // 정기결제 금액
  taxFreeAmount     Int       @default(0)
  vatAmount         Int       @default(0)
  itemName          String    // 상품명
  nextBillingDate   DateTime? // 다음 결제 예정일
  lastBillingDate   DateTime? // 마지막 결제일
  inactiveReason    String?   // 비활성화 사유
  inactiveAt        DateTime? // 비활성화 일시
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments          Payment[] // 해당 구독의 결제 이력들

  @@map("subscriptions")
}
